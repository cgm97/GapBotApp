name: Deploy to EC2

on:
  push:
    branches:
      - master   # master 브랜치에 push될 때 배포

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. 변경된 파일 확인 (Git diff 사용)
      - name: Get changed files
        id: changed_files
        run: |
          # 변경된 파일을 Git diff로 확인
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "Changed files: $changed_files"
          echo "files=$changed_files" >> $GITHUB_ENV

      # 3. 클라이언트 애플리케이션 빌드 (변경된 파일에 React 빌드가 포함되면 실행)
      - name: Build React app if needed
        if: contains(env.files, 'client')  # client 파일이 변경되었으면 빌드 실행
        working-directory: ./client
        run: |
          npm run build  # React 애플리케이션 빌드

      # 4. 변경된 파일을 EC2 서버로 복사 (서버 관련 파일만)
      - name: Copy server files to production server
        if: contains(env.files, 'server')  # server 파일이 변경되었으면 복사
        uses: appleboy/scp-action@v0.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "./server/*"  # 서버 관련 파일만 복사
          target: "/home/ubuntu/GapBotApp/server"  # EC2 서버 경로

      # 5. 클라이언트 파일을 EC2 서버로 복사 (React 빌드 파일만)
      - name: Copy client build files to production server
        if: contains(env.files, 'client')  # client 파일이 변경되었으면 복사
        uses: appleboy/scp-action@v0.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "./client/build/*"  # 빌드된 React 파일만 복사
          target: "/var/www/loagap"  # Nginx가 서빙할 경로 (React 빌드 파일)

      # 6. 서버 빌드 및 실행 (서버 파일이 변경된 경우에만 실행)
      - name: Install dependencies and build server
        if: contains(env.files, 'server')  # 서버 파일이 변경되었으면 빌드 실행
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_KEY }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ubuntu/GapBotApp/server
            pm2 restart GapBotAppServer  # pm2로 서버 재시작
          EOF

      # 7. Nginx 재시작 (React 빌드 후 Nginx에 반영)
      - name: Restart Nginx
        if: contains(env.files, 'client')  # client 파일이 변경된 경우에만 Nginx 재시작
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_KEY }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            sudo systemctl restart nginx  # Nginx 재시작
          EOF
