name: Deploy to EC2 with Conditional Build (Client build, Server pull)

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 필요

      - name: Load last deploy commit
        id: last_commit
        run: |
          if [ -f .last_deploy_commit ]; then
            echo "last_commit=$(cat .last_deploy_commit)" >> $GITHUB_OUTPUT
          else
            echo "last_commit=" >> $GITHUB_OUTPUT
          fi

      - name: Fetch latest origin/master
        run: git fetch origin master

      - name: Detect changed files
        id: detect_changes
        run: |
          LAST_COMMIT=${{ steps.last_commit.outputs.last_commit }}
          if [ -z "$LAST_COMMIT" ]; then
            echo "No last deploy commit found, assume build and deploy needed."
            echo "client_changed=true" >> $GITHUB_OUTPUT
            echo "server_changed=true" >> $GITHUB_OUTPUT
            echo "$(git rev-parse origin/master)" > .last_deploy_commit
          else
            CHANGED_FILES=$(git diff --name-only $LAST_COMMIT origin/master)
            echo "Changed files since last deploy commit:"
            echo "$CHANGED_FILES"

            echo "$CHANGED_FILES" | grep -q "^next-app/" && echo "client_changed=true" >> $GITHUB_OUTPUT || echo "client_changed=false" >> $GITHUB_OUTPUT
            echo "$CHANGED_FILES" | grep -q "^server/" && echo "server_changed=true" >> $GITHUB_OUTPUT || echo "server_changed=false" >> $GITHUB_OUTPUT

            echo "$(git rev-parse origin/master)" > .last_deploy_commit
          fi

      - name: Checkout master at latest commit
        run: git checkout origin/master

      - name: Build next-app (if changed)
        if: steps.detect_changes.outputs.client_changed == 'true'
        run: |
          cd next-app
          npm ci
          npm run build
          cd ..

      - name: Save SSH Key
        run: |
          echo "${{ secrets.EC2_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Upload build to EC2 (if client changed)
        if: steps.detect_changes.outputs.client_changed == 'true'
        run: |
          rsync -avz -e "ssh -i key.pem -o StrictHostKeyChecking=no" \
            ./next-app/.next \
            ./next-app/package.json \
            ./next-app/package-lock.json \
            ./next-app/public \
            ./next-app/node_modules \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/GapBotApp/next-app

      - name: Restart PM2 Client and nginx (if client changed)
        if: steps.detect_changes.outputs.client_changed == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ubuntu/GapBotApp/next-app
            pm2 restart GapAppClient --update-env || pm2 start npm --name GapAppClient -- start
            sudo systemctl restart nginx
          EOF

      - name: Pull & restart server on EC2 (if server changed)
        if: steps.detect_changes.outputs.server_changed == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ubuntu/GapBotApp
            echo "Fetching latest server code..."
            git fetch origin master
            git reset --hard origin/master

            echo "Restarting server process..."
            pm2 restart GapAppServer --update-env || pm2 start npm --name GapAppServer -- start
          EOF
